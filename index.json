{
  "Cobertura/SummaryGithub.html": {
    "href": "Cobertura/SummaryGithub.html",
    "title": "Summary | Bank App",
    "summary": "Summary Summary Generated on: 5/04/2025 - 23:00:00 Coverage date: 5/04/2025 - 22:59:56 Parser: Cobertura Assemblies: 1 Classes: 3 Files: 2 Line coverage: 32.6% (16 of 49) Covered lines: 16 Uncovered lines: 33 Coverable lines: 49 Total lines: 72 Branch coverage: 0% (0 of 4) Covered branches: 0 Total branches: 4 Method coverage: Feature is only available for sponsors Coverage Bank.WebApi - 32.6% Name Line Branch Bank.WebApi 32.6% 0% Bank.WebApi.Models.BankAccount 88.8% Program 0% 0% WeatherForecast 0%"
  },
  "disenio.html": {
    "href": "disenio.html",
    "title": "| Bank App",
    "summary": "classDiagram class BankAccount BankAccount : +String CustomerName BankAccount : +Double Balance BankAccount : +Debit() Void BankAccount : +Credit() Void"
  },
  "docs/Bank.WebApi.Models.BankAccount.html": {
    "href": "docs/Bank.WebApi.Models.BankAccount.html",
    "title": "Class BankAccount | Bank App",
    "summary": "Class BankAccount Namespace Bank.WebApi.Models Assembly Bank.WebApi.dll Representa una cuenta bancaria con funcionalidades básicas de débito y crédito. public class BankAccount Inheritance object BankAccount Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Esta clase proporciona operaciones fundamentales para el manejo de cuentas bancarias, incluyendo validaciones para prevenir operaciones inválidas como débitos que excedan el saldo o montos negativos. Constructors BankAccount(string, double) Inicializa una nueva instancia de la clase BankAccount. public BankAccount(string customerName, double balance) Parameters customerName string El nombre del cliente propietario de la cuenta. balance double El saldo inicial de la cuenta. Examples BankAccount account = new BankAccount(\"Juan Pérez\", 1000.0); Properties Balance Obtiene el saldo actual de la cuenta. public double Balance { get; } Property Value double El saldo actual como un número de punto flotante. CustomerName Obtiene el nombre del cliente propietario de la cuenta. public string CustomerName { get; } Property Value string El nombre del cliente como una cadena de texto. Methods Credit(double) Realiza un crédito (depósito) a la cuenta bancaria. public void Credit(double amount) Parameters amount double La cantidad a acreditar a la cuenta. Examples BankAccount account = new BankAccount(\"Juan Pérez\", 1000.0); account.Credit(500.0); // Saldo resultante: 1500.0 Exceptions ArgumentOutOfRangeException Se lanza cuando el monto es negativo. Debit(double) Realiza un débito (retiro) de la cuenta bancaria. public void Debit(double amount) Parameters amount double La cantidad a debitar de la cuenta. Examples BankAccount account = new BankAccount(\"Juan Pérez\", 1000.0); account.Debit(250.0); // Saldo resultante: 750.0 Exceptions ArgumentOutOfRangeException Se lanza cuando el monto es mayor que el saldo disponible o cuando el monto es negativo."
  },
  "docs/Bank.WebApi.Models.html": {
    "href": "docs/Bank.WebApi.Models.html",
    "title": "Namespace Bank.WebApi.Models | Bank App",
    "summary": "Namespace Bank.WebApi.Models Classes BankAccount Representa una cuenta bancaria con funcionalidades básicas de débito y crédito."
  },
  "docs/Bank.WebApi.Tests.BankAccountTests.html": {
    "href": "docs/Bank.WebApi.Tests.BankAccountTests.html",
    "title": "Class BankAccountTests | Bank App",
    "summary": "Class BankAccountTests Namespace Bank.WebApi.Tests Assembly Bank.WebApi.Tests.dll Contiene las pruebas unitarias para la clase BankAccount. public class BankAccountTests Inheritance object BankAccountTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Esta clase de pruebas verifica el comportamiento correcto de todas las operaciones de la clase BankAccount, incluyendo casos válidos e inválidos para débitos y créditos. Methods Credit_WithNegativeAmount_ThrowsArgumentOutOfRangeException() Verifica que el método Credit lanza ArgumentOutOfRangeException cuando el monto es negativo. [Test] public void Credit_WithNegativeAmount_ThrowsArgumentOutOfRangeException() Credit_WithPositiveAmount_IncreasesBalance() Verifica que el método Credit incrementa correctamente el saldo cuando se proporciona un monto positivo. [Test] public void Credit_WithPositiveAmount_IncreasesBalance() Debit_WithAmountGreaterThanBalance_ThrowsArgumentOutOfRangeException() Verifica que el método Debit lanza ArgumentOutOfRangeException cuando el monto es mayor que el saldo. [Test] public void Debit_WithAmountGreaterThanBalance_ThrowsArgumentOutOfRangeException() Debit_WithNegativeAmount_ThrowsArgumentOutOfRangeException() Verifica que el método Debit lanza ArgumentOutOfRangeException cuando el monto es negativo. [Test] public void Debit_WithNegativeAmount_ThrowsArgumentOutOfRangeException() Debit_WithValidAmount_UpdatesBalance() Verifica que el método Debit actualiza correctamente el saldo cuando se proporciona un monto válido. [Test] public void Debit_WithValidAmount_UpdatesBalance()"
  },
  "docs/Bank.WebApi.Tests.html": {
    "href": "docs/Bank.WebApi.Tests.html",
    "title": "Namespace Bank.WebApi.Tests | Bank App",
    "summary": "Namespace Bank.WebApi.Tests Classes BankAccountTests Contiene las pruebas unitarias para la clase BankAccount."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Bank App",
    "summary": "This is the HOMEPAGE. Diagrama de Clases Pruebas"
  }
}